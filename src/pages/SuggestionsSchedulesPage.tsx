import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Lightbulb,
  Calendar,
  Clock,
  AlertTriangle,
  CheckCircle,
  TrendingUp,
  Target,
  Leaf,
  Droplets,
  Bug,
  Thermometer,
  CloudRain,
  Sun,
  Bell,
  Star,
  Settings,
  BarChart3,
  Zap,
  Timer,
  Activity,
  MapPin,
  Users,
  Smartphone,
  BookOpen,
  Award,
  DollarSign,
  PieChart,
  ArrowRight,
  ChevronRight,
  Plus,
  Filter,
  Search,
  Download,
  Share2,
  Eye,
  Edit,
  Trash2
} from "lucide-react";
import { Link } from "react-router-dom";

interface FarmSuggestion {
  id: string;
  category: 'fertilizer' | 'pesticide' | 'irrigation' | 'general';
  priority: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  actionRequired: string;
  timeframe: string;
  expectedBenefit: string;
  costImplication: number;
  difficulty: 'easy' | 'moderate' | 'complex';
  weatherDependent: boolean;
  cropStage: string;
  confidence: number;
  source: 'ai_analysis' | 'weather_data' | 'sensor_data' | 'expert_system';
}

interface ScheduledTask {
  id: string;
  taskType: 'fertilizer' | 'pesticide' | 'irrigation' | 'cultivation' | 'harvesting' | 'maintenance';
  taskName: string;
  scheduledDate: string;
  scheduledTime: string;
  duration: number;
  zone: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  status: 'pending' | 'in_progress' | 'completed' | 'overdue' | 'cancelled';
  assignedTo: string;
  equipment: string[];
  materials: string[];
  weatherSensitive: boolean;
  autoGenerated: boolean;
  estimatedCost: number;
  instructions: string;
}

interface WeeklyPlan {
  week: string;
  totalTasks: number;
  completedTasks: number;
  criticalTasks: number;
  estimatedCost: number;
  weatherRisk: 'low' | 'medium' | 'high';
  keyActivities: string[];
  focusArea: string;
}

interface OptimizationInsight {
  category: string;
  title: string;
  currentStatus: string;
  recommendation: string;
  potentialSaving: number;
  implementationTime: string;
  difficulty: 'easy' | 'moderate' | 'complex';
  impact: 'low' | 'medium' | 'high';
  trend: 'improving' | 'stable' | 'declining';
}

export const SuggestionsSchedulesPage = () => {
  const [activeTab, setActiveTab] = useState('suggestions');
  const [currentTime, setCurrentTime] = useState(new Date());
  const [filterCategory, setFilterCategory] = useState('all');
  const [filterPriority, setFilterPriority] = useState('all');

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    return () => clearInterval(timer);
  }, []);

  const farmSuggestions: FarmSuggestion[] = [
    {
      id: 'sug-001',
      category: 'fertilizer',
      priority: 'critical',
      title: 'Delay Urea Application Due to Heavy Rain',
      description: 'Heavy rainfall (15-18mm) predicted for next 2 days will cause nitrogen leaching if Urea is applied now.',
      actionRequired: 'Postpone fertilizer application by 3 days until soil conditions improve',
      timeframe: 'Wait 72 hours',
      expectedBenefit: 'Prevent 15% fertilizer loss, save ₹200 on reapplication',
      costImplication: -200,
      difficulty: 'easy',
      weatherDependent: true,
      cropStage: 'Tillering',
      confidence: 94,
      source: 'weather_data'
    },
    {
      id: 'sug-002',
      category: 'pesticide',
      priority: 'critical',
      title: 'Immediate Brown Planthopper Control Required',
      description: 'Pest population (15/m²) exceeds economic threshold (10/m²). Weather conditions favor rapid multiplication.',
      actionRequired: 'Apply Imidacloprid 17.8% SL @ 100ml/acre this evening',
      timeframe: 'Today 6-8 PM',
      expectedBenefit: '92% pest control efficacy, prevent crop loss',
      costImplication: 450,
      difficulty: 'moderate',
      weatherDependent: true,
      cropStage: 'Tillering',
      confidence: 96,
      source: 'sensor_data'
    },
    {
      id: 'sug-003',
      category: 'irrigation',
      priority: 'high',
      title: 'Optimize Irrigation Schedule for Water Savings',
      description: 'Weather forecast shows 12mm rainfall tomorrow. Current irrigation can be reduced by 40%.',
      actionRequired: 'Skip morning irrigation, reduce evening irrigation to 18 minutes',
      timeframe: 'Tomorrow',
      expectedBenefit: 'Save 350L water, reduce cost by ₹26',
      costImplication: -26,
      difficulty: 'easy',
      weatherDependent: true,
      cropStage: 'Multiple',
      confidence: 89,
      source: 'weather_data'
    },
    {
      id: 'sug-004',
      category: 'general',
      priority: 'high',
      title: 'Install Pheromone Traps for Stem Borer Monitoring',
      description: 'Stem borer activity detected in neighboring fields. Proactive monitoring will enable early intervention.',
      actionRequired: 'Install 10 pheromone traps along field edges',
      timeframe: 'Within 5 days',
      expectedBenefit: 'Early detection, 60% reduction in pesticide use',
      costImplication: 200,
      difficulty: 'easy',
      weatherDependent: false,
      cropStage: 'Vegetative',
      confidence: 85,
      source: 'expert_system'
    },
    {
      id: 'sug-005',
      category: 'irrigation',
      priority: 'medium',
      title: 'Upgrade to Drip Irrigation for Vegetable Plot',
      description: 'Current sprinkler system has 78% efficiency. Drip irrigation can improve to 92% efficiency.',
      actionRequired: 'Consider installing drip irrigation system for 2.1 acre vegetable plot',
      timeframe: 'Next season',
      expectedBenefit: 'Save 280L daily, ₹2,100 annually',
      costImplication: 15000,
      difficulty: 'complex',
      weatherDependent: false,
      cropStage: 'Planning',
      confidence: 82,
      source: 'ai_analysis'
    },
    {
      id: 'sug-006',
      category: 'fertilizer',
      priority: 'medium',
      title: 'Soil Test Recommends Zinc Application',
      description: 'Zinc levels (0.8 ppm) below optimal (1.2 ppm). Foliar application recommended.',
      actionRequired: 'Apply Zinc Sulphate 21% @ 12 kg/ha as foliar spray',
      timeframe: 'Within 2 weeks',
      expectedBenefit: 'Improve plant metabolism, prevent deficiency symptoms',
      costImplication: 480,
      difficulty: 'moderate',
      weatherDependent: false,
      cropStage: 'Vegetative',
      confidence: 78,
      source: 'sensor_data'
    }
  ];

  const scheduledTasks: ScheduledTask[] = [
    {
      id: 'task-001',
      taskType: 'pesticide',
      taskName: 'Brown Planthopper Control - Imidacloprid Application',
      scheduledDate: '2024-04-15',
      scheduledTime: '18:00',
      duration: 120,
      zone: 'North Field - Rice',
      priority: 'critical',
      status: 'pending',
      assignedTo: 'Farm Manager',
      equipment: ['Knapsack sprayer', 'Protective gear'],
      materials: ['Imidacloprid 17.8% SL - 100ml'],
      weatherSensitive: true,
      autoGenerated: true,
      estimatedCost: 450,
      instructions: 'Mix 100ml Imidacloprid in 15L water. Spray during evening hours. Ensure complete coverage of plant canopy.'
    },
    {
      id: 'task-002',
      taskType: 'irrigation',
      taskName: 'Modified Irrigation Schedule - Water Conservation',
      scheduledDate: '2024-04-16',
      scheduledTime: '19:00',
      duration: 18,
      zone: 'South Field - Wheat',
      priority: 'high',
      status: 'pending',
      assignedTo: 'Irrigation Operator',
      equipment: ['Sprinkler system'],
      materials: [],
      weatherSensitive: true,
      autoGenerated: true,
      estimatedCost: 0,
      instructions: 'Reduce irrigation time to 18 minutes due to expected rainfall. Monitor soil moisture levels.'
    },
    {
      id: 'task-003',
      taskType: 'fertilizer',
      taskName: 'Urea Application - Delayed Schedule',
      scheduledDate: '2024-04-18',
      scheduledTime: '08:00',
      duration: 180,
      zone: 'North Field - Rice',
      priority: 'high',
      status: 'pending',
      assignedTo: 'Field Worker',
      equipment: ['Fertilizer spreader'],
      materials: ['Urea 45 kg/ha'],
      weatherSensitive: true,
      autoGenerated: true,
      estimatedCost: 1350,
      instructions: 'Apply after soil dries up from recent rainfall. Ensure uniform distribution. Irrigate lightly after application.'
    },
    {
      id: 'task-004',
      taskType: 'cultivation',
      taskName: 'Install Pheromone Traps for Pest Monitoring',
      scheduledDate: '2024-04-17',
      scheduledTime: '09:00',
      duration: 240,
      zone: 'All Fields',
      priority: 'medium',
      status: 'pending',
      assignedTo: 'Farm Supervisor',
      equipment: ['Installation tools'],
      materials: ['Pheromone traps - 10 units', 'Stakes', 'Lures'],
      weatherSensitive: false,
      autoGenerated: true,
      estimatedCost: 200,
      instructions: 'Install traps at 50m intervals along field borders. Change lures every 4 weeks. Monitor weekly.'
    },
    {
      id: 'task-005',
      taskType: 'maintenance',
      taskName: 'Irrigation System Repair - West Field',
      scheduledDate: '2024-04-16',
      scheduledTime: '10:00',
      duration: 480,
      zone: 'West Field - Sugarcane',
      priority: 'high',
      status: 'in_progress',
      assignedTo: 'Maintenance Team',
      equipment: ['Repair tools', 'Replacement parts'],
      materials: ['Pipes', 'Fittings', 'Valves'],
      weatherSensitive: false,
      autoGenerated: false,
      estimatedCost: 2500,
      instructions: 'Repair damaged furrow irrigation system. Test all connections before resuming operations.'
    },
    {
      id: 'task-006',
      taskType: 'irrigation',
      taskName: 'Soil Moisture Calibration Check',
      scheduledDate: '2024-04-19',
      scheduledTime: '07:00',
      duration: 120,
      zone: 'All Sensor Locations',
      priority: 'medium',
      status: 'pending',
      assignedTo: 'Technical Officer',
      equipment: ['Calibration tools', 'Reference probe'],
      materials: [],
      weatherSensitive: false,
      autoGenerated: true,
      estimatedCost: 0,
      instructions: 'Calibrate all soil moisture sensors. Replace low battery units. Update sensor mapping.'
    }
  ];

  const weeklyPlans: WeeklyPlan[] = [
    {
      week: 'This Week (Apr 15-21)',
      totalTasks: 8,
      completedTasks: 2,
      criticalTasks: 2,
      estimatedCost: 4980,
      weatherRisk: 'high',
      keyActivities: ['Pest control', 'Irrigation optimization', 'System maintenance'],
      focusArea: 'Immediate pest and water management'
    },
    {
      week: 'Next Week (Apr 22-28)',
      totalTasks: 5,
      completedTasks: 0,
      criticalTasks: 1,
      estimatedCost: 2100,
      weatherRisk: 'medium',
      keyActivities: ['Fertilizer application', 'Crop monitoring', 'Preventive treatments'],
      focusArea: 'Nutrient management and crop development'
    },
    {
      week: 'Following Week (Apr 29-May 5)',
      totalTasks: 3,
      completedTasks: 0,
      criticalTasks: 0,
      estimatedCost: 800,
      weatherRisk: 'low',
      keyActivities: ['Routine monitoring', 'Equipment maintenance', 'Harvest preparation'],
      focusArea: 'Maintenance and preparation activities'
    }
  ];

  const optimizationInsights: OptimizationInsight[] = [
    {
      category: 'Water Management',
      title: 'Irrigation Efficiency',
      currentStatus: '83% average efficiency',
      recommendation: 'Upgrade vegetable plot to drip irrigation',
      potentialSaving: 2100,
      implementationTime: '2-3 weeks',
      difficulty: 'moderate',
      impact: 'high',
      trend: 'stable'
    },
    {
      category: 'Pest Control',
      title: 'IPM Implementation',
      currentStatus: '70% chemical dependency',
      recommendation: 'Integrate biological control methods',
      potentialSaving: 1800,
      implementationTime: '1 season',
      difficulty: 'moderate',
      impact: 'high',
      trend: 'improving'
    },
    {
      category: 'Fertilizer Use',
      title: 'Nutrient Management',
      currentStatus: 'Weather-adjusted scheduling',
      recommendation: 'Implement variable rate application',
      potentialSaving: 1200,
      implementationTime: '6-8 weeks',
      difficulty: 'complex',
      impact: 'medium',
      trend: 'improving'
    },
    {
      category: 'Energy Costs',
      title: 'Irrigation Timing',
      currentStatus: 'Fixed schedule operations',
      recommendation: 'Use off-peak electricity hours',
      potentialSaving: 900,
      implementationTime: '1 week',
      difficulty: 'easy',
      impact: 'medium',
      trend: 'stable'
    },
    {
      category: 'Labor Efficiency',
      title: 'Task Automation',
      currentStatus: '60% manual operations',
      recommendation: 'Automate routine monitoring tasks',
      potentialSaving: 2400,
      implementationTime: '4-6 weeks',
      difficulty: 'complex',
      impact: 'high',
      trend: 'declining'
    }
  ];

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'fertilizer': return 'bg-green-100 text-green-800 border-green-300';
      case 'pesticide': return 'bg-red-100 text-red-800 border-red-300';
      case 'irrigation': return 'bg-blue-100 text-blue-800 border-blue-300';
      case 'general': return 'bg-purple-100 text-purple-800 border-purple-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-300';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'low': return 'bg-green-100 text-green-800 border-green-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-blue-100 text-blue-800';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'overdue': return 'bg-red-100 text-red-800';
      case 'cancelled': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTaskTypeIcon = (type: string) => {
    switch (type) {
      case 'fertilizer': return <Leaf className="w-5 h-5" />;
      case 'pesticide': return <Bug className="w-5 h-5" />;
      case 'irrigation': return <Droplets className="w-5 h-5" />;
      case 'cultivation': return <Settings className="w-5 h-5" />;
      case 'harvesting': return <Star className="w-5 h-5" />;
      case 'maintenance': return <Settings className="w-5 h-5" />;
      default: return <Activity className="w-5 h-5" />;
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'text-green-600';
      case 'moderate': return 'text-yellow-600';
      case 'complex': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'text-green-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'improving': return <TrendingUp className="w-4 h-4 text-green-600" />;
      case 'stable': return <Activity className="w-4 h-4 text-blue-600" />;
      case 'declining': return <Activity className="w-4 h-4 text-red-600 rotate-180" />;
      default: return <Activity className="w-4 h-4 text-gray-600" />;
    }
  };

  const filteredSuggestions = farmSuggestions.filter(suggestion => {
    const categoryMatch = filterCategory === 'all' || suggestion.category === filterCategory;
    const priorityMatch = filterPriority === 'all' || suggestion.priority === filterPriority;
    return categoryMatch && priorityMatch;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary/20">
      {/* Header */}
      <header className="bg-card/95 backdrop-blur-sm shadow-medium border-b border-border/30">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link to="/" className="text-muted-foreground hover:text-foreground">
                ← Back to Dashboard
              </Link>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                  <Lightbulb className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-foreground">Suggestions & Schedules</h1>
                  <p className="text-sm text-muted-foreground">AI-powered farm management recommendations and task scheduling</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <Badge className="bg-purple-100 text-purple-800">
                <Lightbulb className="w-3 h-3 mr-1" />
                AI-Powered
              </Badge>
              <div className="text-sm text-muted-foreground">
                Updated: {currentTime.toLocaleTimeString()}
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          <Card className="border-border/50 bg-card/90 backdrop-blur-sm text-center">
            <CardContent className="p-6">
              <AlertTriangle className="w-8 h-8 text-red-500 mx-auto mb-2" />
              <div className="text-2xl font-bold text-foreground">2</div>
              <div className="text-sm text-muted-foreground">Critical Actions</div>
              <div className="text-xs text-red-600 mt-1">Today</div>
            </CardContent>
          </Card>

          <Card className="border-border/50 bg-card/90 backdrop-blur-sm text-center">
            <CardContent className="p-6">
              <Timer className="w-8 h-8 text-blue-500 mx-auto mb-2" />
              <div className="text-2xl font-bold text-foreground">8</div>
              <div className="text-sm text-muted-foreground">Scheduled Tasks</div>
              <div className="text-xs text-blue-600 mt-1">This Week</div>
            </CardContent>
          </Card>

          <Card className="border-border/50 bg-card/90 backdrop-blur-sm text-center">
            <CardContent className="p-6">
              <DollarSign className="w-8 h-8 text-green-500 mx-auto mb-2" />
              <div className="text-2xl font-bold text-foreground">₹8.4K</div>
              <div className="text-sm text-muted-foreground">Potential Savings</div>
              <div className="text-xs text-green-600 mt-1">Annual</div>
            </CardContent>
          </Card>

          <Card className="border-border/50 bg-card/90 backdrop-blur-sm text-center">
            <CardContent className="p-6">
              <Target className="w-8 h-8 text-purple-500 mx-auto mb-2" />
              <div className="text-2xl font-bold text-foreground">94%</div>
              <div className="text-sm text-muted-foreground">AI Confidence</div>
              <div className="text-xs text-purple-600 mt-1">Average</div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="suggestions">Smart Suggestions</TabsTrigger>
            <TabsTrigger value="schedule">Task Schedule</TabsTrigger>
            <TabsTrigger value="weekly">Weekly Plans</TabsTrigger>
            <TabsTrigger value="insights">Optimization Insights</TabsTrigger>
          </TabsList>

          <TabsContent value="suggestions" className="space-y-6">
            {/* Filters */}
            <Card className="border-border/50 bg-card/90 backdrop-blur-sm">
              <CardContent className="p-4">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <Filter className="w-4 h-4 text-muted-foreground" />
                    <span className="text-sm font-medium">Filter by:</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-muted-foreground">Category:</span>
                    <select 
                      value={filterCategory} 
                      onChange={(e) => setFilterCategory(e.target.value)}
                      className="text-sm border border-border rounded px-2 py-1"
                    >
                      <option value="all">All</option>
                      <option value="fertilizer">Fertilizer</option>
                      <option value="pesticide">Pesticide</option>
                      <option value="irrigation">Irrigation</option>
                      <option value="general">General</option>
                    </select>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-muted-foreground">Priority:</span>
                    <select 
                      value={filterPriority} 
                      onChange={(e) => setFilterPriority(e.target.value)}
                      className="text-sm border border-border rounded px-2 py-1"
                    >
                      <option value="all">All</option>
                      <option value="critical">Critical</option>
                      <option value="high">High</option>
                      <option value="medium">Medium</option>
                      <option value="low">Low</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="space-y-4">
              {filteredSuggestions.map((suggestion, index) => (
                <Card key={index} className="border-border/50 bg-card/90 backdrop-blur-sm hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-start space-x-4">
                        <div className={`w-12 h-12 rounded-lg flex items-center justify-center border ${getCategoryColor(suggestion.category)}`}>
                          <Lightbulb className="w-6 h-6" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <h3 className="font-bold text-lg">{suggestion.title}</h3>
                            <Badge className={getPriorityColor(suggestion.priority)}>
                              {suggestion.priority.toUpperCase()}
                            </Badge>
                            <Badge className={getCategoryColor(suggestion.category)}>
                              {suggestion.category.toUpperCase()}
                            </Badge>
                            {suggestion.weatherDependent && (
                              <Badge className="bg-blue-100 text-blue-800">
                                <CloudRain className="w-3 h-3 mr-1" />
                                Weather
                              </Badge>
                            )}
                          </div>
                          <p className="text-sm text-muted-foreground mb-3">{suggestion.description}</p>
                          
                          <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                            <div>
                              <span className="text-muted-foreground">Timeframe: </span>
                              <span className="font-medium">{suggestion.timeframe}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Crop Stage: </span>
                              <span className="font-medium">{suggestion.cropStage}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Difficulty: </span>
                              <span className={`font-medium ${getDifficultyColor(suggestion.difficulty)}`}>{suggestion.difficulty}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Confidence: </span>
                              <span className="font-medium text-green-600">{suggestion.confidence}%</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="font-medium text-blue-800 text-sm mb-1">Action Required:</div>
                        <div className="text-blue-700 text-sm">{suggestion.actionRequired}</div>
                      </div>
                      <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <div className="font-medium text-green-800 text-sm mb-1">Expected Benefit:</div>
                        <div className="text-green-700 text-sm">{suggestion.expectedBenefit}</div>
                      </div>
                    </div>

                    <div className="mb-4 p-3 bg-purple-50 border border-purple-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div>
                          <span className="text-purple-800 text-sm font-medium">
                            Cost Impact: 
                            <span className={`ml-1 ${suggestion.costImplication < 0 ? 'text-green-600' : 'text-red-600'}`}>
                              {suggestion.costImplication < 0 ? '-' : '+'}₹{Math.abs(suggestion.costImplication)}
                            </span>
                          </span>
                        </div>
                        <div className="text-xs text-purple-600">
                          Source: {suggestion.source.replace('_', ' ')}
                        </div>
                      </div>
                    </div>

                    <div className="flex space-x-3 pt-4 border-t border-border/30">
                      <Button size="sm" className="bg-purple-600 hover:bg-purple-700">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Accept Suggestion
                      </Button>
                      <Button variant="outline" size="sm">
                        <Calendar className="w-4 h-4 mr-2" />
                        Schedule Task
                      </Button>
                      <Button variant="outline" size="sm">
                        <Share2 className="w-4 h-4 mr-2" />
                        Share
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="schedule" className="space-y-6">
            <div className="space-y-4">
              {scheduledTasks.map((task, index) => (
                <Card key={index} className="border-border/50 bg-card/90 backdrop-blur-sm hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-start space-x-4">
                        <div className={`w-12 h-12 rounded-lg flex items-center justify-center border ${getPriorityColor(task.priority)}`}>
                          {getTaskTypeIcon(task.taskType)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <h3 className="font-bold text-lg">{task.taskName}</h3>
                            <Badge className={getPriorityColor(task.priority)}>
                              {task.priority.toUpperCase()}
                            </Badge>
                            <Badge className={getStatusColor(task.status)}>
                              {task.status.replace('_', ' ').toUpperCase()}
                            </Badge>
                            {task.autoGenerated && (
                              <Badge className="bg-purple-100 text-purple-800">
                                <Zap className="w-3 h-3 mr-1" />
                                Auto
                              </Badge>
                            )}
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                            <div>
                              <span className="text-muted-foreground">Date: </span>
                              <span className="font-medium">{task.scheduledDate}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Time: </span>
                              <span className="font-medium">{task.scheduledTime}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Duration: </span>
                              <span className="font-medium">{task.duration} min</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Zone: </span>
                              <span className="font-medium">{task.zone}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Assigned To: </span>
                              <span className="font-medium">{task.assignedTo}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Estimated Cost: </span>
                              <span className="font-medium text-green-600">₹{task.estimatedCost}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {task.equipment.length > 0 && (
                      <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="font-medium text-blue-800 text-sm mb-1">Required Equipment:</div>
                        <div className="text-blue-700 text-sm">{task.equipment.join(', ')}</div>
                      </div>
                    )}

                    {task.materials.length > 0 && (
                      <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                        <div className="font-medium text-green-800 text-sm mb-1">Required Materials:</div>
                        <div className="text-green-700 text-sm">{task.materials.join(', ')}</div>
                      </div>
                    )}

                    <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <div className="font-medium text-yellow-800 text-sm mb-1">Instructions:</div>
                      <div className="text-yellow-700 text-sm">{task.instructions}</div>
                    </div>

                    <div className="flex space-x-3 pt-4 border-t border-border/30">
                      {task.status === 'pending' && (
                        <Button size="sm" className="bg-green-600 hover:bg-green-700">
                          <CheckCircle className="w-4 h-4 mr-2" />
                          Start Task
                        </Button>
                      )}
                      <Button variant="outline" size="sm">
                        <Edit className="w-4 h-4 mr-2" />
                        Modify
                      </Button>
                      <Button variant="outline" size="sm">
                        <Bell className="w-4 h-4 mr-2" />
                        Set Reminder
                      </Button>
                      {task.weatherSensitive && (
                        <Button variant="outline" size="sm">
                          <CloudRain className="w-4 h-4 mr-2" />
                          Weather Check
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="weekly" className="space-y-6">
            <div className="space-y-6">
              {weeklyPlans.map((plan, index) => (
                <Card key={index} className="border-border/50 bg-card/90 backdrop-blur-sm hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h3 className="font-bold text-xl">{plan.week}</h3>
                          <Badge className={`${
                            plan.weatherRisk === 'high' ? 'bg-red-100 text-red-800' :
                            plan.weatherRisk === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {plan.weatherRisk.toUpperCase()} Weather Risk
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground mb-4">{plan.focusArea}</p>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-4 gap-4 mb-6">
                      <Card className="border border-border/30">
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-blue-600">{plan.totalTasks}</div>
                          <div className="text-sm text-muted-foreground">Total Tasks</div>
                        </CardContent>
                      </Card>
                      
                      <Card className="border border-border/30">
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-green-600">{plan.completedTasks}</div>
                          <div className="text-sm text-muted-foreground">Completed</div>
                        </CardContent>
                      </Card>
                      
                      <Card className="border border-border/30">
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-red-600">{plan.criticalTasks}</div>
                          <div className="text-sm text-muted-foreground">Critical</div>
                        </CardContent>
                      </Card>
                      
                      <Card className="border border-border/30">
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-purple-600">₹{plan.estimatedCost.toLocaleString()}</div>
                          <div className="text-sm text-muted-foreground">Est. Cost</div>
                        </CardContent>
                      </Card>
                    </div>

                    <div className="mb-4">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-muted-foreground">Progress</span>
                        <span className="text-sm font-bold">{Math.round((plan.completedTasks / plan.totalTasks) * 100)}%</span>
                      </div>
                      <Progress value={(plan.completedTasks / plan.totalTasks) * 100} className="h-3" />
                    </div>

                    <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <div className="font-medium text-blue-800 text-sm mb-2">Key Activities:</div>
                      <div className="flex flex-wrap gap-2">
                        {plan.keyActivities.map((activity, i) => (
                          <Badge key={i} className="bg-blue-100 text-blue-800">
                            {activity}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="insights" className="space-y-6">
            <div className="space-y-4">
              {optimizationInsights.map((insight, index) => (
                <Card key={index} className="border-border/50 bg-card/90 backdrop-blur-sm hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-start space-x-4">
                        <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                          <BarChart3 className="w-6 h-6 text-white" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <h3 className="font-bold text-lg">{insight.title}</h3>
                            <Badge className="bg-purple-100 text-purple-800">
                              {insight.category}
                            </Badge>
                            <div className="flex items-center space-x-1">
                              {getTrendIcon(insight.trend)}
                              <span className="text-xs capitalize">{insight.trend}</span>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                            <div>
                              <span className="text-muted-foreground">Current Status: </span>
                              <span className="font-medium">{insight.currentStatus}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Implementation: </span>
                              <span className="font-medium">{insight.implementationTime}</span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Difficulty: </span>
                              <span className={`font-medium ${getDifficultyColor(insight.difficulty)}`}>
                                {insight.difficulty}
                              </span>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Impact: </span>
                              <span className={`font-medium ${getImpactColor(insight.impact)}`}>
                                {insight.impact}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-green-800 text-sm mb-1">Recommendation:</div>
                          <div className="text-green-700 text-sm">{insight.recommendation}</div>
                        </div>
                        <div className="text-right">
                          <div className="text-green-800 font-bold text-lg">₹{insight.potentialSaving}</div>
                          <div className="text-green-600 text-xs">Annual Saving</div>
                        </div>
                      </div>
                    </div>

                    <div className="flex space-x-3 pt-4 border-t border-border/30">
                      <Button size="sm" className="bg-green-600 hover:bg-green-700">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Implement
                      </Button>
                      <Button variant="outline" size="sm">
                        <Eye className="w-4 h-4 mr-2" />
                        View Details
                      </Button>
                      <Button variant="outline" size="sm">
                        <Calendar className="w-4 h-4 mr-2" />
                        Plan Implementation
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <div className="mt-8 p-6 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg">
              <div className="flex items-center space-x-3 mb-4">
                <Award className="w-8 h-8 text-purple-600" />
                <div>
                  <h3 className="font-bold text-lg text-purple-800">Total Optimization Potential</h3>
                  <p className="text-sm text-purple-600">Annual savings from implementing all recommendations</p>
                </div>
              </div>
              
              <div className="grid md:grid-cols-3 gap-6">
                <div className="text-center p-4 bg-white border border-purple-200 rounded-lg">
                  <div className="text-3xl font-bold text-green-600">₹8,400</div>
                  <div className="text-sm text-muted-foreground">Total Annual Savings</div>
                </div>
                <div className="text-center p-4 bg-white border border-purple-200 rounded-lg">
                  <div className="text-3xl font-bold text-blue-600">23%</div>
                  <div className="text-sm text-muted-foreground">Cost Reduction</div>
                </div>
                <div className="text-center p-4 bg-white border border-purple-200 rounded-lg">
                  <div className="text-3xl font-bold text-purple-600">12-16</div>
                  <div className="text-sm text-muted-foreground">Weeks to Implement</div>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};