import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const generatePDFReport = async (
  elementId: string,
  fileName: string,
  title: string
) => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      console.error('Element not found');
      return;
    }

    // Create canvas from the element
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    const imgData = canvas.toDataURL('image/png');
    
    // Calculate dimensions
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = pdfWidth - 20; // 10mm margins on each side
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    // Add title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text(title, pdfWidth / 2, 20, { align: 'center' });

    // Add date
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const currentDate = new Date().toLocaleDateString('en-IN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    pdf.text(`Generated on: ${currentDate}`, pdfWidth / 2, 28, { align: 'center' });

    // Add the image
    let yPosition = 35;
    if (imgHeight > pdfHeight - yPosition - 10) {
      // Image is too tall for one page, split it
      const pageHeight = pdfHeight - yPosition - 10;
      const ratio = pageHeight / imgHeight;
      const adjustedImgHeight = pageHeight;
      const adjustedImgWidth = imgWidth * ratio;
      
      pdf.addImage(imgData, 'PNG', 10, yPosition, adjustedImgWidth, adjustedImgHeight);
    } else {
      pdf.addImage(imgData, 'PNG', 10, yPosition, imgWidth, imgHeight);
    }

    // Add footer
    pdf.setFontSize(8);
    pdf.text('Generated by Kisan Smart Aid', pdfWidth / 2, pdfHeight - 10, { align: 'center' });

    // Save the PDF
    pdf.save(`${fileName}-${new Date().toISOString().split('T')[0]}.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('Error generating PDF. Please try again.');
  }
};

export const downloadData = (data: any, fileName: string, type: 'json' | 'csv' = 'json') => {
  if (type === 'json') {
    const jsonStr = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${fileName}-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  } else if (type === 'csv') {
    // Simple CSV export for basic data
    const csv = convertToCSV(data);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${fileName}-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    URL.revokeObjectURL(url);
  }
};

const convertToCSV = (data: any[]): string => {
  if (!Array.isArray(data) || data.length === 0) return '';
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),
    ...data.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
  ].join('\n');
  
  return csvContent;
};