import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  Mic, 
  MicOff, 
  Send, 
  Volume2, 
  VolumeX, 
  MessageSquare,
  Bot,
  User,
  Headphones,
  Languages,
  Settings,
  Zap,
  Leaf,
  Cloud,
  DollarSign,
  Calendar,
  AlertTriangle,
  CheckCircle,
  Clock,
  Smartphone
} from "lucide-react";
import { Link } from "react-router-dom";

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  audioUrl?: string;
}

interface QuickQuery {
  id: string;
  text: string;
  icon: any;
  category: string;
}

export const VoiceAssistantPage = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ñ‡•á‡§§‡•Ä, ‡§Æ‡•å‡§∏‡§Æ, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•ã‡§Ç ‡§î‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
      timestamp: new Date(),
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('hi');
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickQueries: QuickQuery[] = [
    { id: '1', text: '‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?', icon: Cloud, category: 'Weather' },
    { id: '2', text: '‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?', icon: DollarSign, category: 'Market' },
    { id: '3', text: '‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ‡§∞‡•ã‡§ó ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£', icon: Leaf, category: 'Health' },
    { id: '4', text: '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø', icon: Calendar, category: 'Schedule' },
    { id: '5', text: '‡§ñ‡§æ‡§¶ ‡§ï‡§¨ ‡§°‡§æ‡§≤‡•á‡§Ç?', icon: Zap, category: 'Fertilizer' },
    { id: '6', text: '‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§Ø', icon: Calendar, category: 'Harvest' }
  ];

  const languages = [
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
    { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
    { code: 'gu', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥' },
    { code: 'mr', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' }
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: message,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');

    // Simulate AI response
    setTimeout(() => {
      const responses = getAIResponse(message);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: responses,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiMessage]);
    }, 1000);
  };

  const getAIResponse = (query: string): string => {
    const lowercaseQuery = query.toLowerCase();
    
    if (lowercaseQuery.includes('‡§Æ‡•å‡§∏‡§Æ') || lowercaseQuery.includes('weather')) {
      return 'üå§Ô∏è **‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ:** ‡§Ü‡§ú ‡§ï‡§æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® 28¬∞C ‡§π‡•à, ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ 65% ‡§π‡•à‡•§ ‡§ï‡§≤ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§Ü‡§ú ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§\n\nüìÖ **‡§∏‡•Å‡§ù‡§æ‡§µ:** ‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§Ü‡§ú ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§ï‡§≤ ‡§∏‡•á ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§';
    }
    
    if (lowercaseQuery.includes('‡§ï‡•Ä‡§Æ‡§§') || lowercaseQuery.includes('price') || lowercaseQuery.includes('‡§ó‡•á‡§π‡•Ç‡§Ç')) {
      return 'üí∞ **‡§Ü‡§ú ‡§ï‡•Ä ‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ:**\n\nüåæ ‡§ó‡•á‡§π‡•Ç‡§Ç: ‚Çπ2,400/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (+5%)\nüåæ ‡§ß‡§æ‡§®: ‚Çπ3,200/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤\nüåΩ ‡§Æ‡§ï‡•ç‡§ï‡§æ: ‚Çπ1,800/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤\n\nüìà **‡§∏‡•Å‡§ù‡§æ‡§µ:** ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§¨‡§¢‡§º ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç, ‡§Ö‡§ó‡§≤‡•á ‡§π‡§´‡•ç‡§§‡•á ‡§¨‡•á‡§ö‡§®‡§æ ‡§´‡§æ‡§Ø‡§¶‡•á‡§Æ‡§Ç‡§¶ ‡§π‡•ã‡§ó‡§æ‡•§';
    }
    
    if (lowercaseQuery.includes('‡§∞‡•ã‡§ó') || lowercaseQuery.includes('‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä') || lowercaseQuery.includes('disease')) {
      return 'üîç **‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö:**\n\n‚ö†Ô∏è **‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡§ï‡•ç‡§∑‡§£:**\n‚Ä¢ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§™‡•Ä‡§≤‡•á ‡§ß‡§¨‡•ç‡§¨‡•á\n‚Ä¢ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡•Å‡§∞‡§ù‡§æ‡§®‡§æ\n‚Ä¢ ‡§§‡§®‡§æ ‡§Æ‡•á‡§Ç ‡§ï‡•Ä‡§°‡§º‡•á\n\nüíä **‡§â‡§™‡§æ‡§Ø:**\n‚Ä¢ ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§õ‡§ø‡§°‡§º‡§ï‡•á‡§Ç\n‚Ä¢ ‡§ï‡•â‡§™‡§∞ ‡§∏‡§≤‡•ç‡§´‡•á‡§ü ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç';
    }
    
    if (lowercaseQuery.includes('‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à') || lowercaseQuery.includes('‡§™‡§æ‡§®‡•Ä') || lowercaseQuery.includes('irrigation')) {
      return 'üíß **‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡•Å‡§ù‡§æ‡§µ:**\n\n‚úÖ **‡§Ö‡§≠‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç:** ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä 45% ‡§π‡•à\n\n‚è∞ **‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§Æ‡§Ø:** ‡§∏‡•Å‡§¨‡§π 6-8 ‡§¨‡§ú‡•á ‡§Ø‡§æ ‡§∂‡§æ‡§Æ 5-7 ‡§¨‡§ú‡•á\n\nüìä **‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ:** ‡§è‡§ï‡§°‡§º ‡§ï‡•á ‡§≤‡§ø‡§è 1000-1500 ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä\n\n‚ö° **‡§ü‡§ø‡§™:** ‡§ï‡§≤ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§≤‡•ç‡§ï‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§';
    }
    
    if (lowercaseQuery.includes('‡§ñ‡§æ‡§¶') || lowercaseQuery.includes('fertilizer') || lowercaseQuery.includes('‡§â‡§∞‡•ç‡§µ‡§∞‡§ï')) {
      return 'üå± **‡§ñ‡§æ‡§¶ ‡§î‡§∞ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ:**\n\nüìÖ **‡§Ö‡§≠‡•Ä ‡§°‡§æ‡§≤‡•á‡§Ç:**\n‚Ä¢ ‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ: 50 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º\n‚Ä¢ DAP: 25 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º\n‚Ä¢ ‡§™‡•ã‡§ü‡§æ‡§∂: 20 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º\n\n‚ö° **‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶:**\n‚Ä¢ ‡§ó‡•ã‡§¨‡§∞ ‡§ï‡•Ä ‡§ñ‡§æ‡§¶: 500 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º\n‚Ä¢ ‡§ï‡•á‡§Ç‡§ö‡•Å‡§Ü ‡§ñ‡§æ‡§¶ ‡§¨‡§π‡•Å‡§§ ‡§´‡§æ‡§Ø‡§¶‡•á‡§Æ‡§Ç‡§¶\n\nüí∞ **‡§≤‡§æ‡§ó‡§§:** ‡§≤‡§ó‡§≠‡§ó ‚Çπ3,000/‡§è‡§ï‡§°‡§º';
    }

    if (lowercaseQuery.includes('‡§ï‡§ü‡§æ‡§à') || lowercaseQuery.includes('harvest') || lowercaseQuery.includes('‡§´‡§∏‡§≤ ‡§ï‡§æ‡§ü‡§®‡§æ')) {
      return 'üåæ **‡§ï‡§ü‡§æ‡§à ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**\n\nüìÖ **‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§Ø:** ‡§Ö‡§ó‡§≤‡•á 2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç\n\nüå§Ô∏è **‡§Æ‡•å‡§∏‡§Æ:** ‡§ß‡•Ç‡§™ ‡§µ‡§æ‡§≤‡•á ‡§¶‡§ø‡§® ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç\n\nüìä **‡§´‡§∏‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä:** 85% ‡§¶‡§æ‡§®‡•á ‡§™‡§ï ‡§ó‡§è ‡§π‡•à‡§Ç\n\nüí∞ **‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ:** ‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡§æ‡§¶ ‡§¨‡•á‡§ö‡•á‡§Ç, ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡§Ç';
    }

    return 'ü§î ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•Ç‡§õ‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç:\n\n‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä\n‚Ä¢ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç\n‚Ä¢ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä\n‚Ä¢ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§î‡§∞ ‡§ñ‡§æ‡§¶\n‚Ä¢ ‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø\n\n‡§Ü‡§™ ‡§µ‡•â‡§á‡§∏ ‡§Ø‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§';
  };

  const handleQuickQuery = (query: string) => {
    handleSendMessage(query);
  };

  const toggleListening = () => {
    if (isListening) {
      // Stop listening
      setIsListening(false);
    } else {
      // Start listening
      setIsListening(true);
      // Simulate voice recognition
      setTimeout(() => {
        setInputMessage('‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç');
        setIsListening(false);
      }, 3000);
    }
  };

  const toggleSpeaking = () => {
    setIsSpeaking(!isSpeaking);
    setVoiceEnabled(!voiceEnabled);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary/20">
      {/* Header */}
      <header className="bg-card/95 backdrop-blur-sm shadow-medium border-b border-border/30">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link to="/" className="text-muted-foreground hover:text-foreground">
                ‚Üê Back to Dashboard
              </Link>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center">
                  <Bot className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-foreground">AI Voice Assistant</h1>
                  <p className="text-sm text-muted-foreground">Your personal agricultural advisor</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Languages className="w-4 h-4" />
                <select 
                  value={selectedLanguage}
                  onChange={(e) => setSelectedLanguage(e.target.value)}
                  className="text-sm border border-border rounded px-2 py-1 bg-background"
                >
                  {languages.map(lang => (
                    <option key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Chat Interface */}
          <div className="lg:col-span-2">
            <Card className="h-[600px] flex flex-col border-border/50 bg-card/90 backdrop-blur-sm">
              <CardHeader className="border-b border-border/20">
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <MessageSquare className="w-5 h-5" />
                    <span>Chat with AI Assistant</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge className="bg-green-100 text-green-800">
                      <CheckCircle className="w-3 h-3 mr-1" />
                      Online
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleSpeaking}
                      className={voiceEnabled ? 'text-blue-600' : 'text-gray-400'}
                    >
                      {voiceEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
                    </Button>
                  </div>
                </CardTitle>
              </CardHeader>

              {/* Messages */}
              <CardContent className="flex-1 p-0 overflow-y-auto">
                <div className="p-4 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`flex items-start space-x-3 max-w-[80%] ${
                        message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                      }`}>
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          message.type === 'user' 
                            ? 'bg-gradient-primary text-white' 
                            : 'bg-gradient-sage text-white'
                        }`}>
                          {message.type === 'user' ? 
                            <User className="w-4 h-4" /> : 
                            <Bot className="w-4 h-4" />
                          }
                        </div>
                        <div className={`rounded-lg p-3 ${
                          message.type === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-secondary text-secondary-foreground'
                        }`}>
                          <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                          <div className="text-xs opacity-70 mt-1">
                            {message.timestamp.toLocaleTimeString('en-IN', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>
              </CardContent>

              {/* Input Area */}
              <div className="border-t border-border/20 p-4">
                <div className="flex space-x-2">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="Type your question or use voice..."
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(inputMessage)}
                    className="flex-1"
                  />
                  <Button
                    onClick={toggleListening}
                    variant={isListening ? "default" : "outline"}
                    size="icon"
                    className={isListening ? 'bg-red-500 hover:bg-red-600 text-white' : ''}
                  >
                    {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                  </Button>
                  <Button
                    onClick={() => handleSendMessage(inputMessage)}
                    disabled={!inputMessage.trim()}
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
                
                {isListening && (
                  <div className="mt-3 flex items-center justify-center space-x-2 text-red-600">
                    <div className="animate-pulse">
                      <Mic className="w-4 h-4" />
                    </div>
                    <span className="text-sm">Listening... Speak now</span>
                    <div className="flex space-x-1">
                      <div className="w-1 h-4 bg-red-500 animate-pulse"></div>
                      <div className="w-1 h-4 bg-red-500 animate-pulse" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-1 h-4 bg-red-500 animate-pulse" style={{animationDelay: '0.2s'}}></div>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </div>

          {/* Quick Actions & Info */}
          <div className="space-y-6">
            {/* Voice Status */}
            <Card className="border-border/50 bg-card/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Headphones className="w-5 h-5 text-green-500" />
                  <span>Voice Assistant Status</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Voice Recognition</span>
                  <Badge className="bg-green-100 text-green-800">Active</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Text to Speech</span>
                  <Badge className={voiceEnabled ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"}>
                    {voiceEnabled ? 'Enabled' : 'Disabled'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Language</span>
                  <Badge className="bg-blue-100 text-blue-800">Hindi</Badge>
                </div>
                
                <div className="pt-2">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium">Voice Quality</span>
                    <span className="text-sm text-green-600">Excellent</span>
                  </div>
                  <Progress value={95} className="h-2" />
                </div>
              </CardContent>
            </Card>

            {/* Quick Queries */}
            <Card className="border-border/50 bg-card/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Zap className="w-5 h-5 text-orange-500" />
                  <span>Quick Questions</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-2">
                  {quickQueries.map((query) => {
                    const Icon = query.icon;
                    return (
                      <Button
                        key={query.id}
                        variant="ghost"
                        onClick={() => handleQuickQuery(query.text)}
                        className="justify-start text-left h-auto p-3 hover:bg-secondary/50"
                      >
                        <Icon className="w-4 h-4 mr-2 text-blue-500" />
                        <span className="text-sm">{query.text}</span>
                      </Button>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* AI Capabilities */}
            <Card className="border-border/50 bg-card/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Settings className="w-5 h-5 text-purple-500" />
                  <span>AI Capabilities</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Weather Information</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Market Price Updates</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Crop Disease Diagnosis</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Irrigation Guidance</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Fertilizer Recommendations</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Harvest Timing</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4 text-orange-500" />
                    <span>Government Schemes (Coming Soon)</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Tips */}
            <Card className="bg-blue-50 border-blue-200 border-border/50 bg-card/90 backdrop-blur-sm">
              <CardContent className="p-4">
                <h4 className="font-semibold text-blue-900 mb-2 flex items-center">
                  <Smartphone className="w-4 h-4 mr-2" />
                  Voice Assistant Tips:
                </h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ Speak clearly and slowly</li>
                  <li>‚Ä¢ Ask specific questions</li>
                  <li>‚Ä¢ Use Hindi or English</li>
                  <li>‚Ä¢ You can type or speak</li>
                  <li>‚Ä¢ Ask follow-up questions</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};